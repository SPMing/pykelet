<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="file:///home/joseph/Desktop/grobid/grobid-home/schemas/rng/Grobid.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Portable High-Quality Random Number Generator for Lattice Field Theory Simulations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="1993-09">September 1993</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Martin</forename>
								<forename type="middle">L</forename>
								<surname>Uscher</surname>
							</persName>
							<affiliation>
								<orgName type="department">Deutsches Elektronen-Synchrotron DESY</orgName>
								<address>
									<addrLine>Notkestrasse 85</addrLine>
									<postCode>D-22603</postCode>
									<settlement>Hamburg</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Portable High-Quality Random Number Generator for Lattice Field Theory Simulations</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="1993-09">September 1993</date>
						</imprint>
					</monogr>
					<note>hep-lat/9309020 28 Sep 1993</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The theory underlying a proposed random number generator for numerical simulations in elementary particle physics and statistical mechanics is discussed. The generator is based on an algorithm introduced by Marsaglia and Zaman, with an important added feature leading to demonstrably good statistical properties. It can be implemented exactly on any computer complying with the IEEE{754 standard for single precision oating point arithmetic.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
			<div>
				<head n="1">Introduction</head>

				<p>Numerical simulations in elementary particle physics and statistical mechanics are increasingly performed on massively parallel computers. These machines ooer unmatched computing power, thus making it possible to simulate larger systems and to achieve greater statistical precision. It is well-known that the random number generators employed in these computations can be a source of systematic error. In fact many of the popular generators used to date failed to give correct results in some recent simulations of the 2-dimensional Ising model 1,2]. While the Ising model is a rather special case, with unusual regularity, the lesson clearly is that random number generators should be chosen with care, especially when one aims for high-precision results.</p>

				<p>The generator discussed in this paper derives from an algorithm originally proposed by Marsaglia and Zaman 3]. It has a very long period and excellent statistical properties on short and long time scales. The quality of the generator is established using some mathematical results on chaotic dynamical systems, the spectral test and a number of empirical tests.</p>

				<p>The algorithm has been implemented on the APE-100, a parallel computer now intensively used in elementary particle physics (for a short description and guide to the literature see ref..4]). One may also easily write a FORTRAN code for the generator, which will run correctly on any machine complying with the IEEE-754 standard for single precision oating point arithmetic. The deenition and basic properties of the Marsaglia-Zaman algorithm are reviewed in sect. 2. For appropriately chosen parameters the period of the generator can be proved to be very large 3]. Its statistical properties are however not as good as initially assumed. In particular, the generator fails in the classical gap test 5] and an unfavourable lattice structure in the distribution of random numbers in high dimensions has been discovered 6,7]. The important new observation made in this paper is that the Marsaglia- Zaman algorithm is closely related to a dynamical system, which is known to be chaotic in a strong sense (it is a so-called K-system 11]). One then infers that the correlations detected in the gap test, for example, are short ranged in time. A sequence of random numbers with much better statistical properties is therefore obtained by picking out elements of the original sequence at time intervals greater than the correlation time. All this is explained in sects. 3 and 4, and the quality of the so improved generator is evaluated in sect. 5. Implementation details and timing benchmarks for various machines are included for completeness.</p>

			</div>
			<div>
				<head n="2">Marsaglia-Zaman generator</head>

				<p>The random number generator deened below is based on a so-called subtract-with-borrow algorithm 3]. For the particular choice of parameters speciied in subsect. 2.4 the generator is known by the name of RCARRY 8].</p>

			</div>
			<div>
				<head n="2.1">Deenition</head>

				<p>Let b be an arbitrary integer greater than 1, referred to as the base, and deene X to be the set of integers x satisfying 0 x &lt; b. The algorithm generates a random sequence x 0 ; x 1 ; x 2 ; : : : of elements of X recursively, together with a sequence c 0 ; c 1 ; c 2 ; : : : of \carry bits&quot;. The latter take values 0 or 1 and are used internally, i.e. the interesting output of the algorithm are the numbers x n , or rather x n =b, if one requires random numbers uniformly distributed between 0 and 1.</p>

				<p>The recursion involves two xed lags, r and s, which are assumed to satisfy r &gt; s 1. For n r one rst computes the diierence n = x ns x nr c n1 ; (2:1) and then determines x n and c n through x n = n ; c n = 0 if n 0; x n = n + b; c n = 1 if n &lt; 0:</p>

				<p><formula>(2:2)</formula></p>

				<p>It is trivial to verify that x n is contained in X if x ns and x nr are and if c n1 is 0 or 1. The name \carry bit&quot; for c n is now quite intuitive, since c n simply indicates whether a shift by the base b was necessary when computing x n . To start the recursion, the rst r values x 0 ; x 1 ; : : :; x r1 together with an initial carry bit c r1 must be provided.</p>

				<figure>
					<trash>The conngurations x 0 = x 1 = : : : = x r1 = 0; c r1 = 0; (2:3) x 0 = x 1 = : : : = x r1 = b 1; c r1 = 1; (2:4) should be avoided, because the algorithm yields uninteresting sequences of numbers in these cases. All other choices of initial values are admitted in the following and we shall then say that the generator has been properly initialized.</trash>


				</figure>

			</div>
			<div>
				<head n="2.2">Period of the generator</head>

				<p>For some values of the base b and the lags r; s, the period of the sequence</p>

				<figure>
					<trash>generated through eqs.(2.1),(2.2) can be determined rigorously. Deene m = b r b s + 1 (2:5)</trash>


				</figure>

				<p>and let q be the smallest positive integer such that b q = 1 mod m:</p>

				<p><formula>(2:6)</formula></p>

				<p>The existence of q is guaranteed since m and b are relatively prime. An important mathematical result of Marsaglia and Zaman now is 3]</p>

				<p>Theorem 2.1. If m is a prime number, the period of the generator deened through eqs.(2.1),(2.2) is equal to q. More precisely, if the generator has been properly initialized, the following is true. 1. For all n r we have x n+q = x n . 2. Any number p, such that x n+p = x n for more than r successive values of n, is an integer multiple of q.</p>

				<p>It should be emphasized that the period is independent of the chosen initial values x 0 ; x 1 ; : : :; x r1 . Note that this particular string of numbers may not occur anywhere else in the sequence, i.e. in general the algorithm gets into a loop only after the rst r updates have been made.</p>

				<p>Another comment is that the period of the generator must be expected to depend on the initial values, if m is not prime. Such generators are not safe and should be avoided unless all periods can be shown to be large.</p>

				<figure>
					<trash>2.3 Associated linear congruential generator The algorithm of Marsaglia and Zaman is closely related to the standard linear congruential generator with multiplier a = m (m 1)=b (2:7) and modulus m 6</trash>

					<figDesc>]. Such generators have been studied vigorously in the past and we shall later rely on some of this theory when we discuss the statistical properties of the random number sequence produced by the Marsaglia-Zaman algorithm.</figDesc>

				</figure>

				<p>The linear congruential generator alluded to above operates on the set of all integers y in the range 0 &lt; y &lt; m. Starting from an initial value y 0 , a sequence of random numbers y 0 ; y 1 ; y 2 ; : : : is obtained recursively through y n = ay n1 mod m:</p>

				<figure>
					<trash>(2:8) The multiplier a satisses ab = 1 mod m (2:9)</trash>


				</figure>

				<p>and the recursion is thus equivalent to y n = by n+1 mod m:</p>

				<p><formula>(2:10)</formula></p>

				<p>It is not diicult to show that the period of the sequence is equal to q if m is prime. The relation between this generator and the Marsaglia-Zaman generator is summarized by 6]</p>

				<p>Theorem 2.2. Let (x n ) n0 be a sequence of random numbers generated through the Marsaglia-Zaman algorithm, with carry bits (c n ) n0 and proper initial values. Then, for all n r, the integers</p>

				<p><formula>y n = r1 X k=0 x nr+k b k s1 X k=0 x ns+k b k + c n1 (2:11)</formula></p>

				<p>are in the range 0 &lt; y n &lt; m. Moreover the relation by n+1 y n = mx n (2:12) holds and the sequence (y n ) nr is thus generated through the recursion (2.8).</p>

				<p>The theorem shows at once that the Marsaglia-Zaman algorithm is essentially a clever way to implement certain linear congruential generators with huge moduli. Manipulations of large integers are avoided by breaking them up into a vector of smaller numbers which are then processed one by one.</p>

			</div>
			<div>
				<head n="2.4">Choice of parameters</head>

				<p>Most computers used for large scale numerical simulations have been designed to yield maximum performance for oating point operations. The parameters b, r and s should thus be chosen so as to be able to implement the generator using oating point arithmetic. Single precision real numbers on computers complying with the IEEE- 754 standard are represented by a string of 32 bits, with 23 bits reserved for the mantissa and the rest for the sign and exponent of the number. Signed integers of absolute magnitude up to 2 24 can thus be dealt with exactly on such machines using oating point arithmetic. So if we choose</p>

				<figure>
					<trash>b = 2 24 ; (2:13) all elements of X (and b itself) will be computer representable numbers. As for the lags r and s, we take r = 24; s = 10; (2:14) a choice proposed by Marsaglia and Zaman 3] and recommended by James 8]. The diierence n in the recursion (2.2) then is n = x n10 x n24 c n1 ; (2:15) and 24</trash>


				</figure>

				<p>integers x 0 ; x 1 ; : : :; x 23 in the range 0 x k &lt; 2 24 plus a carry bit c 23 are required to initialize the generator y. Note that no rounding occurs in the computation of n , since the nal and intermediate results are representable numbers, i.e. the algorithm is implemented exactly.</p>

				<p>The modulus m and multiplier a for this choice of parameters are given</p>

				<figure>
					<trash>by m = 2 576 2 240 + 1; (2:16) a = 2 576 2 552 2 240 + 2 216 + 1: (2:17)</trash>


				</figure>

				<p>Using elementary number theory and the complete decomposition of m 1 into prime factors, it is possible to prove that m is a prime number 3]. The y The FORTRAN code for this algorithm printed in ref..8] contains an error. A correct program is obtained by interchanging the indices I24 and J24 in the line UNI=SEEDS(I24)- SEEDS(J24)-CARRY 9]. period of the generator is thus determined by theorem 2.1. Some further work then yields q = (m 1)=48 &apos; 5:2 10 171 ; (2:18) which is a very long period indeed. There is no chance that, on any earthly computer, one will ever come close to exhausting this sequence of random numbers.</p>

				<p>In the following the parameters of the generator are assumed to be as speciied above. The reader should however meet no diiculty in carrying over the discussion to any other case of interest.</p>

			</div>
			<div>
				<head n="3">Origin of statistical correlations</head>

				<p>The Marsaglia-Zaman generator is now known to fail in several empirical tests of randomness, a particularly simple case being the gap test ((5]; for a lucid description of the test see ref..10], p.60f). As explained below there are in fact some rather obvious correlations between successive vectors of r random numbers. They are seen most clearly when the generator is described in the language of dynamical systems.</p>

			</div>
			<div>
				<head n="3.1">Geometrical preliminaries</head>

				<p>The unit hyper-cube in r dimensions is the set of all vectors v = (v 0 ; v 1 ; : : :; v r1 ) (3:1) with real components between 0 and 1. If opposite faces of the hyper-cube are identiied one obtains an r dimensional torus T r . The points on this manifold are also represented by vectors v, as above, with the understanding that v and w describe the same point if v k = w k mod 1 for all k. T r contains a discrete subset, _ T r , which consists of all vectors v with components of the form v k = n k =b; n k = 0; 1; 2; : : :; b 1:</p>

				<p><formula>(3:2) _</formula></p>

				<p>T r is an r dimensional hyper-cubic lattice with spacing 1=b, which may be regarded as a discrete approximation of the torus.</p>

				<p>The distance between any two points v and w on T r is deened through d(v; w) = max k d k ; d k = min jv k w k j; 1 jv k w k j : (3:3) It is straightforward to check that d has all the properties required for a decent distance function on T r . In particular, it is invariant under translations</p>

				<figure>
					<trash>modulo 1. 3.2 The Marsaglia-Zaman generator as a dynamical system</trash>


				</figure>

				<p>Let us now consider a sequence of random numbers x 0 ; x 1 ; x 2 ; : : : generated through the Marsaglia-Zaman algorithm, with carry bits (c n ) n0 and proper initial values. The vectors v(t) = (x n ; x n+1 ; : : :; x n+r1 )=b; n = rt; (3:4) deene a point on the (discrete) torus _ T r which moves as the \time&quot; t progresses from 0 in steps of 1. If we also introduce a time dependent carry bit,</p>

				<figure>
					<trash>c(t) = c rt+r1 ; (3:5) it is clear that the evolution of v(t) and c(t) is determined by the recursion (2.1),(2.2).</trash>


				</figure>

				<p>We are thus led to interpret the Marsaglia-Zaman generator as a discrete dynamical system, consisting of a set S of states and a mapping : S 7 ! S. A state is deened by a point on the discrete torus and a carry bit. maps any such state onto the next one, viz.</p>

				<figure>
					<trash>v(t + 1); c(t + 1) = v(t); c(t) : (3:6) Note that does not refer to any of the previous states. One only needs to know the current state to be able to compute the next one.</trash>


				</figure>

			</div>
			<div>
				<head n="3.3">Continuity and statistical correlations</head>

				<p>For a good generator one requires that successive vectors of random numbers be statistically independent. That is, if (v; c) runs through all possible states, the joint distribution of (v; c) and (v; c) should be uniform on S S. Of course this cannot be true since operates on a nite set of states. The distribution is at best approximately uniform. Since one can only generate a relatively small number of states in practice, one is anyway unable to test the distribution very precisely. One should however be worried by correlations that are strong enough to give a measurable eeect in any simple statistical test. We now show that such correlations exist. Let us rst ignore the carry bits. The recursion (2.1),(2.2) then reads x n = x ns x nr mod b (3:7) and becomes a linear transformation of the torus. An important consequence of this fact is that nearby points are mapped onto nearby ones. So if one chooses a set of random points v in some small volume, their successors (v) are contained in some other small volume. In particular, they are not scattered over the whole torus, as one would expect if (v) were statistically independent of v.</p>

				<p>The carry bits only aaect the least signiicant digits of the random numbers and so cannot destroy the basic continuity of .</p>

				<figure>
					<trash>More precisely, if we deene (^ v; ^ c) = (v; c); (3:8) it is possible to show that d(^ v; ^ w) 4d(v; w) + 3=b: (3:9)</trash>

					<figDesc>The distance between two points on _ T r thus increases by at most a factor 4 plus 3 lattice spacings. In particular, small regions are mapped onto small regions and so we again conclude that successive vectors of random numbers are strongly correlated. It should be emphasized that the eeects caused by these correlations are readily seen in empirical tests. In particular, the failure of the Marsaglia- Zaman generator in the gap test can be explained in this way. Note, incidentally, that similar correlations are present in all lagged Fibonacci generators using addition or subtraction as the binary operation.</figDesc>

				</figure>

			</div>
			<div>
				<head n="4">Deterministic chaos</head>

				<p>A characteristic feature of chaotic dynamical systems is that trajectories starting at nearby states diverge exponentially with time. Even if the evolution is locally continuous, such a system appears to behave randomly on larger time scales. One could also say that any state speciied to some nite precision has an exponentially deteriorating memory of its history. We now show that the dynamical system underlying the Marsaglia-Zaman generator is chaotic in this sense.</p>

			</div>
			<div>
				<head n="4.1">Numerical experiment</head>

				<figure>
					<figDesc>It is helpful to start with a simple experiment illustrating the chaotic nature of the mapping . The experiment consists in choosing a random sample of 1000</figDesc>
					<trash>pairs of trajectories v(t); c(t) and v 0 (t); c 0 (t) , with initial values separated by 1 lattice spacing, viz. d(v(0); v 0 (0)) = 1=b: (4:1) One then computes the average distance (t) = d(v(t); v 0 (t)) (4:2)</trash>


				</figure>

				<p>as a function of the evolution time t. Fig. 1 shows that the trajectories are rapidly diverging. In the range 4 t 16 the data are well described by</p>

				<p><formula>(t) = Ae t ; A = 5 10 8 ; (4:3)</formula></p>

				<p>i.e. the separation is growing exponentially with a rate close to 1. Around t = 17, (t) levels oo and assumes a value equal to 12=25 within statistical errors. This is the average distance between two randomly chosen points on the torus, thus indicating that v(t) and v 0 (t) are no longer correlated.</p>

				<figure>
					<trash>0 5 10 15 20 -8 -6 -4 -2 0 Fig. 1</trash>


				</figure>

				<p>. Average distance (t) between neighbouring trajectories as a function of the evolution time t.</p>

			</div>
			<div>
				<head n="4.2">Continuum limit</head>

				<p>For the further study of deterministic chaos it is now useful to pass to the continuum limit 1=b ! 0, where the space of states S becomes equal to the full torus T r and the carry bit is neglected. This is an accurate approximation to the discrete system on short time scales and if all distances of interest are much greater than the lattice spacing. In particular, the evolution of diverging trajectories can be expected to be correctly described when they are suuciently far apart.</p>

				<p>In the continuum limit the mapping reduces to</p>

				<figure>
					<trash>(v) = L r v mod 1; (4:4) where L is the linear transformation Lv = (v 1</trash>

					<figDesc>; v 2 ; : : :; v r1 ; v rs v 0 ): (4:5) L can be considered an r r matrix with entries 0; 1 and 1. It is then trivial to verify that det L = 1 and is hence invertible and volume preserving. According to the established mathematical terminology, the continuum system (T r ; ; ) (where denotes the standard measure on T r ) is a classical dynamical system. The occurence of chaos in such systems has been studied extensively and many deep results have been obtained. In the rest of this section the system (T r ; ; ) will be discussed from the point of view of the mathematical theory. Although no previous knowledge on dynamical systems is required, the reader may now nd it useful to consult one or the other book on the subject such as refs..11{13], for example. 4.3 Liapunov exponent In the continuum system the exponential rate of divergence of neighbouring trajectories can be computed analytically as follows.</figDesc>

				</figure>

				<p>Suppose v(t) and v 0 (t) are two trajectories such that their distance is very much smaller than 1 at t = 0. Let us deene the diierence vector</p>

				<p><formula>u(t) = v 0 (t) v(t) mod 1; 1 2 &lt; u k (t) 1 2 : (4:6)</formula></p>

				<p>It is clear that the norm of this vector, ku(t)k = max k ju k (t)j; (4:7) is equal to the distance between the trajectories at time t.</p>

				<figure>
					<trash>Furthermore, from eq.(4.4) one infers that u(t + 1) = L r u(t) (4:8) if</trash>


				</figure>

				<p>kL r u(t)k &lt; 1 2 , a condition which is satissed as long as the trajectories are suuciently close.</p>

				<p>The dominant exponential growth of the deviation vector u(t) is hence determined by the largest eigenvalues of L. The characteristic equation of</p>

				<p><formula>L, r rs + 1 = 0; (4:9)</formula></p>

				<p>can easily be solved numerically and one nds that all eigenvalues are complex and non-degenerate. There are 4 eigenvalues with maximal absolute value given by jj max = 1:04299 : : :</p>

				<p><formula>(4:10)</formula></p>

				<p>Now if the initial deviation vector u(0) has a non-zero component in the direction of the corresponding eigenvectors (which is the generic case), one concludes that</p>

				<p><formula>ku(t)k / e t (4:11) at large times t, where = r ln jj max = 1:01027 : : : (4:12)</formula></p>

				<p>Of course eq.(4.11) only holds as long as the evolution equation (4.8) applies.</p>

				<p>By considering smaller and smaller initial deviations, this condition will be fulllled for any desired length of time. Eq.(4.11) then becomes asymptotically exact.</p>

				<p>The exponent is referred to as the Liapunov exponent of the system.</p>

				<p>As already noted in subsect. 4.2, the evolution of diverging trajectories in the discrete system is expected to be accurately described by the continuum system. A comparison of the result of the experiment, eq.(4.3), with the value of the Liapunov exponent connrms this. We have thus shown that the chaotic behaviour of the Marsaglia-Zaman generator can be traced back to the instability of the underlying lagged Fibonacci generator.</p>

			</div>
			<div>
				<head n="4.4">Kolmogorov entropy and mixing</head>

				<p>The continuum system (T r ; ; ) can be proved to belong to a class of strongly unstable systems. While the relevance of this remark for the discrete system is not completely obvious, it does provide some further insight into how repeated application of a smooth mapping can lead to randomness.</p>

				<p>The mapping is in many respects similar to the famous cat map of Arnold. In particular, under the action of the torus is stretched in r=2 directions and shrunk in r=2 complementary directions. After many iterations any region in T r (a cat&apos;s body, for example) is rst made very long and thin and then wrapped on the torus. As a result the region is scattered over the whole manifold. These heuristic remarks can be made much more precise and it is then possible to show, using the theorems discussed in ref..11], that (T r ; ; ) is a so-called K-system. This means that it has a positive Kolmogorov entropy and that consequently it is mixing and ergodic.</p>

				<p>The property of mixing is particularly intuitive.</p>

				<figure>
					<trash>It states that lim t!1 A \ t (B) = (A)(B) (4:13)</trash>


				</figure>

				<p>for all measurable sets A; B. In other words, if the set B is evolved for a long time, it will be uniformly distributed over the torus and thus occupies a fraction (B) of every other set A (recall that is volume preserving).</p>

				<p>The Kolmogorov entropy is a substantially more diicult notion. Basically it is the rate at which the knowledge about the system is lost as it evolves from an only imprecisely speciied initial state. A positive entropy thus implies that one loses information exponentially fast.</p>

			</div>
			<div>
				<head n="5">Improved generator</head>

				<p>The important qualitative implication of the chaotic nature of is that the correlations discovered in sect. 3 are short ranged in time. A sequence of random numbers with signiicantly better statistical properties is therefore obtained by keeping only a fraction of the full sequence of numbers produced by the Marsaglia-Zaman algorithm. The precise rule is given below and several statistical tests are performed to connrm the expected improvement.</p>

			</div>
			<div>
				<head n="5.1">Deenition</head>

				<p>We again start from a sequence of random numbers x 0 ; x 1 ; x 2 ; : : : generated through the Marsaglia-Zaman algorithm, with carry bits (c n ) n0 and proper initial values. Instead of using all numbers x n , we now read r successive elements of the sequence, discard the next pr numbers, read r numbers, and so on. The integer p r is a xed parameter which allows us to monitor the fraction of random numbers \thrown away&quot;. In particular, the old generator corresponds to p = r, where no numbers are discarded.</p>

				<p>The numbers selected in this manner deene a history of states v(t); c(t) through v(t) = (x n ; x n+1 ; : : :; x n+r1 )=b; n = pt; c(t) = c n+r1 :</p>

				<p><formula>(5:1)</formula></p>

				<p>As before the time evolution is generated by a well-deened mapping p : S</p>

				<figure>
					<trash>7 ! S such that v(t + 1); c(t + 1) = p v(t); c(t) : (5:2)</trash>


				</figure>

				<p>In the continuum limit p reduces to the linear transformation p (v) = L p v mod 1; (5:3) where L is given by eq.(4.5).</p>

				<p>The discussion in sect. 4 now suggests that deterministic chaos leads to a complete decorrelation of successive states for values of p greater than about 16r = 384. For such p the corresponding sequence of random numbers is expected to possess excellent statistical properties. In practice one may be satissed with a smaller value of p, as a full decorrelation, down to the level of the least signiicant bits, may in many cases be unnecessary. The statistical tests reported in the following subsections help to clarify the situation and a more deenite recommendation as to which value of p to choose will be issued after that.</p>

			</div>
			<div>
				<head n="5.2">Spectral test</head>

				<p>For any state (v; c) an integer y in the range 0 &lt; y &lt; m may be deened</p>

				<figure>
					<trash>through y = r1 X k=0 v k b k+1 s1 X k=0 v rs+k b k+1 + c; (5:4) where v 0 ; v 1</trash>

					<figDesc>; : : :; v r1 are the components of v (cf. theorem 2.2). y should be regarded as an observable constructed from the given state. In particular, a trajectory v(t); c(t)</figDesc>

				</figure>

				<p>of states, generated by the mapping p , is associated with a sequence of values y(t).</p>

				<figure>
					<trash>Theorem 2.2 tells us that y(t + 1) = a p y(t) mod m; (5:5) i.e</trash>


				</figure>

				<p>. p is related to a linear congruential generator with modulus m and multiplier a p mod m. The multi-dimensional distributions of y(t) can be studied by applying the powerful spectral test for linear congruential generators. The test eeectively probes the statistical independence of successive states v(t); c(t)</p>

			</div>
			<div>
				<head>, since any</head>

				<p>correlation between the values of y(t) can be regarded as a correlation among the corresponding states. For a detailed description of the spectral test the reader is referred to Knuth&apos;s book 10]. Here we merely introduce the necessary notations and discuss the results of the test. An infamous property of linear congruential generators is that vectors of D successive random numbers fall on parallel hyper-planes with often appreciable spacing. The spectral test consists in calculating the maximal spacing h D , or rather the \accuracy&quot; D = 1=h D , for low dimensionalities D. The Table 1. Merits D of some generators with modulus m and multiplier a p mod m</p>

				<figure>
					<trash>p 2 3 4 5 6 7 8 24 4 29 85 56 2 27 86 3 72 6 58 48 0:20 0:07 0:03 9 23 5:08 2 33 2 31 96 2:67 1:04 1:64 0:04 1:60 0:14 0:10 192 1:82 0:67 0:70 1:53 2:69 4:78 1:54 384 0:56 0:82 2:30 1:56 0:84 4:60 0:29 768 1:63 2:59 3:08 0:59 0:96 1:29 1:12 223 1:80 0:87 2:39 3:79 2:29 0:78 2:29 389 2:27 3:46 3:92 2:49 2:98 4:23 0:46 = 1 10 ; m and a are given by eqs.(2.16),(2.17)]</trash>


				</figure>

				<p>outcome of the spectral test may be rated through the gures of merit</p>

				<p><formula>D = ( D p ) D m 1 2 D + 1 : (5:6)</formula></p>

				<p>Good generators achieve values of D greater than 1 for say D = 2; : : :; 6. On the other hand, if the merit is signiicantly smaller than 0:1 for some of these dimensions, one has picked a particularly bad multiplier.</p>

				<p>The results of the spectral test are listed in table 1. The rst line corresponds to the original generator where no random numbers are discarded. As already noted in refs..6,7], there are strong correlations between successive values of the observable y in this case, for any dimensionality D. Evidently this generator is a poor source of random numbers.</p>

				<p>In general the merits are quite acceptable for p greater than about 200.</p>

				<p>The merits for two favoured values around 200 and 400 are listed in the last two lines of table 2. All this is very much in line with what one expects from deterministic chaos. It should however be emphasized that the spectral test is a full period test, while the decorrelation through diverging trajectories takes place on short time scales. 5.3 Further statistical tests a. Serial correlation test. This test is applied to the associated linear congruential generator. It is a full-period theoretical test, where one computes the correlation coeecient between successive values of y exactly (see ref..10] for further explanations). For values of p greater than about 100 it is passed easily. b. Gap test. In ref..5] the original generator (p = 24) has been subjected to a large number of empirical tests. All tests were passed with the exception of the gap test. This test has now been repeated for various values of p, with the same test parameters, and no signiicant statistical correlations were detected for p 48. c. Ising model. Simulations of the 2-dimensional Ising model, using cluster algorithms, have proved to be a particularly sensitive test of random number generators 1,2]. Such a test has recently been performed by Woll 14] for p = 223 and p = 389. In both cases no discrepancy between the simulation data and the exact analytic results was found. d. SU(2) lattice gauge theory. The generator with p = 223 is now being used in some high-precision calculations of the running coupling in the SU(2) lattice gauge theory 15]. So far all results obtained are compatible with earlier computations where shift register generators were employed.</p>

			</div>
			<div>
				<head n="5.4">Recommended values of p</head>

				<p>From the theoretical discussion and the tests of the improved generator one concludes that the remaining statistical correlations are small when p is greater than about 200. The recommended default value is p = 223, and if one has any doubts that the simulation results might be biased by the random number generator, one may still set p = 389. A decorrelation of successive vectors of r random numbers down to the least signiicant digits is then guaranteed.</p>

				<p>To take still larger values of p appears to be pointless, since no empirical test or theoretical consideration indicates that a further improvement will be achieved. Table 2. Average time needed to produce 1 new random number (p = 223)</p>

				<figure>
					<trash>machine time s] SUN 10-41 5 HP 9000/735 2 CRAY YMP (1 CPU) 0.7 APE-100 (1 node) 5 5.5 Implementation and timing</trash>


				</figure>

				<p>As discussed in sect. 2, the Marsaglia-Zaman algorithm can be implemented exactly using single precision oating point arithmetic. If random numbers between 0 and 1 are desired, it is advantageous to work directly with the numbers x n =b instead of x n . No rounding is implied by this renormalization since b is a power of 2, i.e. the implementation remains exact.</p>

				<p>A portable FORTRAN code for the improved generator has been developed by James 16] and is available through the CPC library. The name of the program is RANLUX. It comes with an initialization subroutine and further entry points to save and read the state of the generator. The generator has also been implemented on the APE-100 parallel computer 17]. The program may be obtained through anonymous ftp by dialing 141.108.16.27 and copying the contents of the directory pub/random, or by writing to the author (luscher@ips102.desy.de). Since one uses only a fraction of the basic sequence of random numbers, the improved generator tends to be slow. For numerical simulations of lattice eld theories, where large quantitites of random numbers are requested, it is hence important to take full advantage of any pipelining capabilities of the hardware. A diiculty here is that the Marsaglia-Zaman recursion (2.1),(2.2) refers to the carry bit c n1 computed in the preceding step and so is not suitable for vectorization. The problem can be overcome by running several copies of the generator in parallel, with diierent initial values. The arithmetic operations are then pipelined horizontally, i.e. when looping over the copies. On the APE-100, for example, a good eeciency is achieved with 24 copies on each node. Some care should of course be paid to properly initialize the generators. In view of the astronomical period of the generator, the chances that any two of the copies yield signiicantly correlated random numbers are however extremely slim.</p>

				<p>Some timing benchmarks for the improved generator with p = 223 are listed in table 2 14,17]. The programs were written in FORTRAN and APESE, a high-level language for the APE-100. It is obvious that the numbers quoted depend on many technical details. They should hence be interpreted as a rough estimate of what can be achieved with a modest programming eeort.</p>

			</div>
			<div>
				<head n="6">Concluding remarks</head>

				<p>A well-known problem with random number generators is that their quality is diicult to assess in any rigorous way. Some conndence in the reliability of any given generator can of course be gained by performing a large number of statistical tests. But doubts will always remain that the generator might fail in the next test. There exists an impressive list of classical dynamical systems which have been shown to be strongly chaotic. The states in these systems move randomly on time scales substantially greater than a certain characteristic time, related to the Liapunov exponent of the system. It should be emphasized that randomness can be given a precise mathematical meaning in this framework.</p>

				<p>The random number generator discussed in this paper may be considered a discrete approximation to such a chaotic dynamical system. A theoretical understanding of why the algorithm yields statistically independent random numbers is thus obtained. On longer time scales theoretical support for the good quality of the generator comes from the spectral test and the fact that the period can be shown to be extremely long. One might object that the generator is too slow for large scale applications. But other parts of the program are often much more costly so that the extra computer time needed for the generator is insigniicant. One may also prefer to pay the price rather than taking any risk of producing corrupted data, especially when spending months of parallel computer time to a single project. I would like to thank Ulli Woll for performing the Ising model tests and providing some of the timing benchmarks quoted in table 2. I am also indebted to Fred James for various useful informations and constant encouragement. Helpful discussions with Kari Kankaala, Rainer Sommer, Marcus Speh, Frank Steiner and Peter Weisz are gratefully acknowledged.</p>

			</div>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Ferrenberg</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">P</forename>
				<surname>Landau</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<forename type="middle">J</forename>
				<surname>Wong</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. Lett</title>
		<imprint>
			<biblScope unit="page" from="69" to="3382" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Analysis of Random Number Generators Using Monte Carlo Simulation, preprint</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">D</forename>
				<surname>Coddington</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Marsaglia</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Zaman</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Ann</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Prob</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page">462</biblScope>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Marinari</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Suppl.)</title>
		<meeting>. Suppl.)</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page">122</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">A Compar- ative Study of Some Pseudorandom Number Generators, preprint, Uni- versity of Helsinki HU-TFT-93-22</title>
		<author>
			<persName>
				<forename type="first">I</forename>
				<surname>Vattulainen</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Kankaala</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Saarinen</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Ala-Nissila</surname>
			</persName>
		</author>
		<imprint>
			<biblScope unit="page">9304008</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">On the Lattice Structure of the Add-With-Carry and Subtract-With-Borrow Random Number Genera- tors</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Tezuka</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">L</forename>
				<surname>Ecuyer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Couture</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page">preprint</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">On the Lattice Structure of Certain Lin- ear Congruential Sequences Related to AWC/SWB Generators</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Couture</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">L</forename>
				<surname>Ecuyer</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page">preprint</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>James</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Comp</forename>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Commun</title>
		<imprint>
			<biblScope unit="page" from="60" to="329" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>James</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
	<note>private. communication</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Semi-Numerical Algorithms, in: The Art of Computer Pro- gramming</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">E</forename>
				<surname>Knuth</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1981" />
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading MA</pubPlace>
		</imprint>
	</monogr>
	<note>2nd. ed.</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Ergodic Problems of Classical Mechanics</title>
		<author>
			<persName>
				<forename type="first">V</forename>
				<forename type="middle">I</forename>
				<surname>Arnold</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Avez</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Addi- son-Wesley, Redwood City</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName>
				<forename type="first">H</forename>
				<forename type="middle">G</forename>
				<surname>Schuster</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Deterministic</forename>
				<surname>Chaos</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>VCH Verlagsgesellschaft</publisher>
			<pubPlace>Weinheim</pubPlace>
		</imprint>
	</monogr>
	<note>2nd. ed.</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Hamiltonian Systems: Chaos and Quantization</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">M</forename>
				<surname>Ozorio</surname>
			</persName>
		</author>
		<author>
			<persName>
				<surname>Almeida</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>Cambridge University Press</publisher>
			<pubPlace>Cambridge</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Woll</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
	<note>private. communication</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Frezzotti</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Guagnelli</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>L Uscher</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Petronzio</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Sommer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Weisz</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Woll</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">progress 16] F. James, Comp. Phys. Commun., to appear 17] M. L uscher, A Random Number Generator for the APE-100 Parallel Com- puter, unpublished internal report</title>
		<imprint>
			<date type="published" when="1993-06" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
